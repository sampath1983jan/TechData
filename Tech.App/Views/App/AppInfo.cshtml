
@{
    ViewBag.Title = "AppInfo";
    Layout = "~/Views/Shared/AppLayout.cshtml";
} 


<div id="app">
    <router-view default="{name: 'home'}"></router-view>
</div>
 
    <script type="text/javascript">
    var appid = '@ViewBag.AppID';  
        $(document).ready(function () {  
              window.dropdown_c = {};
        require(
            // configuration
            {
                paths: {
                    'jquery': '/Scripts/jquery-3.3.1',
                    'popper': '/Scripts/popper',
                    'bootstrap': '/Scripts/bootstrap',
                    "combobox": "/Scripts/Controls/ComboBox/ComboBox",
                    "token": "/Scripts/Controls/Tokenizer/Tokenizer",
                    "controls": "/scripts/controls/Control-vue",
                    "tzGrid": "/vue/controls/Grid",
                    "touch": "https://cdnjs.cloudflare.com/ajax/libs/jquery.touchswipe/1.6.19/jquery.touchSwipe.min",
                    "jqueryui": "/Scripts/jquery-ui",
                    "datepicker": "/Scripts/Controls/datepicker/daterangepicker",
                    "bdatepicker": "/Scripts/Controls/datepicker/bootstrap-datepicker",
                    "timer": "/Scripts/Controls/timer",
                    "moment": "/Scripts/Controls/datepicker/moment",
                    "color": "/Scripts/Controls/ColorPicker/bootstrap-colorpicker",
                    "input": "/vue/controls/input",
                    "textarea": "/vue/controls/textarea",
                    "dropdown": "/vue/controls/dropdown",
                    "NumberSlider": "/Scripts/Controls/NumberSlider/NumberSlider",
                    "calendar": "/Scripts/Controls/calendar",
                    "Pagination": "/Scripts/Controls/Pagination/Pagination",
                    "tzSearch": "/vue/controls/Search",
                    "Tokenizer": "/vue/controls/Tokenizer",
                    "tzprogress": "/vue/controls/Progress",
                    "cvprogress": "/vue/controls/Circular-Progress",
                    "toaster": "/vue/controls/toast",
                    "pMeter": "/vue/controls/progressmeter",
                    urlArgs: 'bust=v328',
                }
            },
            // load libs right now
            ["jquery", "popper", "bootstrap", "combobox", "controls", "input", "textarea", "tzSearch", "dropdown",
                "tzGrid", "token", "Tokenizer", 'tzprogress', "cvprogress", "toaster", "pMeter", "moment", "calendar", "timer", "color", "datepicker",
                "bdatepicker", "NumberSlider", "Pagination", "touch", "jqueryui"],
            function (aa, popper, b, combobox, controls, input, textarea, tzSearch, dropdown, Griod, tx, token, tProgress, cvprogress, toaster,
                ProgressMeter, mom, calendar, color, NumberSlider, page, touch) {
                window.dropdown_c = dropdown;
                window.popper = popper;
                var cmManager = httpVueLoader('/vue/App/Component/ComponentManager.vue?4');
                var CompForm = httpVueLoader('/vue/App/Component/CompForm.vue?' + (Math.random() * 10000));
                var attributes = httpVueLoader('/vue/App/Component/CompAttributes.vue?' + (Math.random() * 10000));
                var atDesigner = httpVueLoader('/vue/App/Component/AttributeDesigner.vue?' + (Math.random() * 10000));

                const Root = { template: '<div>root</div>' }
                const Home = cmManager;//{ template: '<div><h1>Home</h1><router-view></router-view></div>' }
                const Foo = { template: '<div>foo</div>' }
                const Bar = { template: '<div>bar</div>' }
                const Baz = { template: '<div>baz</div>' }
                const Default = { template: '<div></div>' }
                const Nested = { template: '<router-view/>' }
                const NestedFoo = { template: '<div>nested foo</div>' }

                const router = new VueRouter({
                    //  mode: 'history',
                    // base: __dirname,
                    routes: [
                        //{ path: '/root', component: Root, alias: '/root-alias' },
                        {
                            path: '/Home/:AppiD?', name: "home", component: Home, params: { AppiD: appid }, props: true,
                            children: [
                                // absolute alias
                                { path: '/Home/:id/component/:action', component: CompForm  ,"name":"App"},
                                // relative alias (alias to /home/bar-alias)
                                {
                                    path: '/Home/:id/attributes/:cid', component: attributes, name: "component",
                                    children: [
                                        { path: 'changeattribute', component: atDesigner, alias: '/Home/:id/attributes/:cid/change/:attid', name:"compAttribute"}, //alias: '/:attid'
                                        { path: 'addattribute', component: atDesigner, name: "mytesting", alias: '/Home/:id/attributes/:cid/addattribute' , name:"compAttributeAdd"}
                                       
                                    ]
                                },
                                // multiple aliases
                                { path: 'baz', component: Baz, alias: ['/baz', 'baz-alias'] },
                                // default child route with empty string as alias.
                                { path: 'default', component: Default, alias: '' },
                                // nested alias
                                {
                                    path: 'nested', component: Nested, alias: 'nested-alias',
                                    children: [
                                        { path: 'foo', component: NestedFoo }
                                    ]
                                }
                            ]

                        },
                        {
                            path: "/Form:AppID", name: "FromDesigner", component: Form, params: { AppID: appid },props:true

                        }
                    ]
                })

                var self = new Vue({
                    router: router,
                    components: {
                        "popper":  popper,
                        'tzinput': input,
                        'dropdown': dropdown,
                        "Griod": Griod,
                        "Searching": tzSearch,
                        "Tokenizer": token,
                        "mvprogress": tProgress,
                        "cvprogress": cvprogress,
                        "toaster": toaster,
                        "ProgressMeter": ProgressMeter
                    }
                }).$mount('#app');
                self.$router.push({ name: 'home', params: { AppiD: appid } });
            }
        );
        });

     

    $(document).ready(function () {

        var template = '<div>{0}</div>';
        getApp = function (id) {
            var that = this;
            $.ajax('/MyApp/' + id,
                {
                    type: "GET",
                    dataType: 'jsonp', // type of response data
                  //  data: {  appid: id },
                    // timeout milliseconds
                    success: function (data, status, xhr) {   // success callback function
                        var App = data;
                    //    template = template.format( App.Description);
                        $("#apptitle").find("h3").append(App.AppName );
                       // $("#container").append(template);
                    },
                    error: function (jqXhr, textStatus, errorMessage) { // error callback
                        alert(errorMessage);
                    }
                });
        }

        newCompnonent = function (plc) {
            var a = httpVueLoader('/vue/App/component/csimpleform.vue?6');
            new Vue({
                components: {
                    "csimpleform": a,
                    //'Client': client
                },
                data: function () {
                    return {}
                },
                methods: {
                    newApp: function () {
                    },
                    afterSaved: function () {
                        window.r.$refs.refComp.forceRerender();
                    }
                },
                watch: {
                },
                computed: {
                    getVal: function () {
                    }
                }
            }).$mount('#' + plc);
        }

        String.prototype.format = function () {
            a = this;
            for (k in arguments) {
                a = a.replace("{" + k + "}", arguments[k])
            }
            return a
        }
        getApp(appid);
    });

    //debugger;
    //var template = "<div style='margin-left:35%'>"
    //    + '<label class="stlabel" > Component Name</label>'
    //    + '<div style="width:65%">'
    //    + '<tzinput : attribute="{'
    //    + "id: 'txtComponentName', "
    //    + "isRequired:false,"
    //    + "enabletooltip:true,"
    //    + "min:0,"
    //    + "inputType:1,"
    //    + "max:500,"
    //    + "limit:true"
    //    + ' }"'
    //    + ':value="compName" v-on:input = "updating" ></tzinput > '
    // +"</div>"
    //    + '<label class="stlabel">Title</label>'
    //    + '<div style="width:65%">'
    //    + '<tzinput : attribute="{'
    //    + "id: 'txtTitle',"
    //    + "isRequired:false,"
    //    + " enabletooltip:true,"
    //    + "min:0,"
    //    + "inputType:1,"
    //    + "max:500,"
    //    + "limit:true"
    //    + '}"'
    //    + ':value="title" v-on:input="updatetitle"></tzinput>'
    //    + "</div>"
    //    + '<label class="stlabel">Title</label>'
    //    + '<div style="width:65%">'
    //    + '<tzinput : attribute="{'
    //    + "id: 'txtCagory',"
    //    + "isRequired:false,"
    //    + "enabletooltip:true,"
    //    + "min:0,"
    //    + "inputType:1,"
    //    + "max:500,"
    //    + "limit:true"
    //    + '}"'
    //    + ':value="category" v-on:input="updatecategory"></tzinput>'
    //    + "</div>"
    //    + '<label class="stlabel">Title Format</label>'
    //    + '<div style="width:65%">'
    //    + '<tzinput : attribute="{'
    //    + "id: 'txtTitleFormat',"
    //    + "isRequired:false,"
    //    + "enabletooltip:true,"
    //    + "min:0,"
    //    + "inputType:1,"
    //    + "max:500,"
    //    + "limit:true"
    //    + '}"'
    //    + ' :value="titleformat" v-on:input="updatetitleformat"></tzinput>'
    //    + "</div>"

    //    + '<div style="position:absolute; left:69%">'
    //    + '<button class="btn btn-primary" v-on: click="Save">Save</button>'
    //    + '<button class="btn btn-default" v-on: click="Close">Cancel</button>'
    //    + "</div>"
    //    + "</div>";
    //document.write(template);
 //   var AppComponent = {};
    </script>
