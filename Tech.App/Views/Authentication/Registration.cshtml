@model Tz.BackApp.Models.RegistrationView
@{
    ViewBag.Title = "Registration";
}




<div id="onRegistraction"></div>

<div id = "onRegistraction" class="float-label" >
<div class="row">
    <div id="fg1" class="control col-md-6"></div>
    <div id="fg2" class="control col-md-6"></div>
</div>
<div class="row">
    <div id="fg4" class="control col-md-6"></div>
    <div id="fg5" class="control col-md-6"></div>

    <div class="control col-md-6"></div>
</div>
<div class="row"> <div id="fg3" class="control col-md-6"></div>    </div>
 </div>
@*@if (ViewBag.Status != null && Convert.ToBoolean(ViewBag.Status))
    {
        if (ViewBag.Message != null)
        {
            <div class="alert alert-success">
                <strong>Success!</strong> @ViewBag.Message
            </div>
        }
    }
    else
    {
        using (Html.BeginForm())
        {
            @Html.AntiForgeryToken()

            <div class="form-horizontal">
                <h4>Registration</h4>
                <hr />
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                <div class="form-group">
                    @Html.LabelFor(model => model.Username, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Username, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Username, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.FirstName, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.FirstName, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.FirstName, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.LastName, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.LastName, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.LastName, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
                        @Html.ValidationMessage("ErrorEmail", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.Password, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Password, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Password, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.ConfirmPassword, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.ConfirmPassword, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.ConfirmPassword, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    <div class="col-md-offset-2 col-md-10">
                        <input type="submit" value="Create" class="btn btn-default" />
                        <a class="pull-right" href="#" onclick='window.location = "@Url.Action("login", "Authentication")";'>Back to login</a>

                    </div>
                </div>
            </div>

            if (ViewBag.Message != null)
            {
                <div class="alert alert-danger">
                    <strong>Error!</strong> @ViewBag.Message
                </div>
            }

        }
    }*@

<script type="text/javascript">
    $(document).ready(function () {

        (function ($reg) {
            $reg.Include = function (options) {
                var defaults = {
                    plc: "",
                    onRegistration: function () {

                    },
                    onCancel: function () {

                    }
                };
                $.extend(this, defaults, options);
               // $("#" + this.plc).append("<div id='lblField'></div>");
                var addUserName = function (cthis) {

                }
                var addFirstName = function (cthis) {

                }
                var addLastName = function (cthis) {

                }
                var addPassword = function (cthis) {

                }
                var addEmailID = function (cthis) {

                }
                var utype = [{ key: 1, value: "User" }, { key: 2, value: "Admin" },{ key: 3, value: "Super Admin" }]

                $("#" + this.plc).labelfields({
                    items: [{
                        label: "User Name",
                        field: {
                            id: "userName", 'note': "Enter username here",
                            limit: true, maxlength: 15, inputType: 1, textType: 1, timeformat: 0, 'regexp': "", "text": "",
                            format: "hex", range: false
                        },
                        id: 'fg1'
                    }, {
                        label: "Email address",
                        field:
                        {
                            id: "emailaddress", 'note': "demo@gmail.com",
                            limit: true, maxlength: 15, inputType: 1, textType: 1, timeformat: 12, 'regexp': "", "text": "",
                            format: "hex", range: true,
                            date: {
                                datepickerType: 1,
                                timeformat: 12,
                                dateformat: "dd.mm.yyyy".toUpperCase()
                            },
                            autofill: {
                                type: "select",
                                allowCustomText: true
                            },
                            selectPicker: {
                                datasource: [],
                                displayField: "make_display",
                                valueField: "make_id",
                                selection: "multiple"
                            },
                            upload: {
                                fileExtension: ['doc', 'docx', 'txt'],
                                showPreview: true,
                                url: "/Security/Upload",
                                selection: 'multiple'
                            }
                        }
                        ,
                        id: 'fg2'
                        },
                        {
                        label: "Password",
                        field:
                        {
                            id: "Passwordctr", 'note': "",
                            limit: true, maxlength: 15, inputType:1, textType:2, timeformat: 12, 'regexp': "", "text": "",
                            format: "hex", range: true,
                            date: {
                                datepickerType: 1,
                                timeformat: 12,
                                dateformat: "dd.mm.yyyy".toUpperCase()
                            },
                            autofill: {
                                type: "select",
                                allowCustomText: true
                            },
                            selectPicker: {
                                datasource: [],
                                displayField: "make_display",
                                valueField: "make_id",
                                selection: "multiple"
                            },
                            upload: {
                                fileExtension: ['doc', 'docx', 'txt'],
                                showPreview: true,
                                url: "/Security/Upload",
                                selection: 'multiple'
                            }
                        },
                        id: 'fg4'
                        },
                        {
                            label: "Confirm Password",
                            field:
                            {
                                id: "cPasswordctr", 'note': "",
                                limit: true, maxlength: 15, inputType: 1, textType: 2, timeformat: 12, 'regexp': "", "text": "",
                                format: "hex", range: true,
                                date: {
                                    datepickerType: 1,
                                    timeformat: 12,
                                    dateformat: "dd.mm.yyyy".toUpperCase()
                                },
                                autofill: {
                                    type: "select",
                                    allowCustomText: true
                                },
                                selectPicker: {
                                    datasource: [],
                                    displayField: "make_display",
                                    valueField: "make_id",
                                    selection: "multiple"
                                },
                                upload: {
                                    fileExtension: ['doc', 'docx', 'txt'],
                                    showPreview: true,
                                    url: "/Security/Upload",
                                    selection: 'multiple'
                                }
                            },
                            id: 'fg5'
                        },
                        {
                            label: "User Type",
                            field:
                            {
                                id: "usertype", 'note': "",
                                limit: true, maxlength: 15, inputType: 19, textType: 1, timeformat: 12, 'regexp': "", "text": "",
                                format: "hex", range: true,
                                date: {
                                    datepickerType: 1,
                                    timeformat: 12,
                                    dateformat: "dd.mm.yyyy".toUpperCase()
                                },
                                autofill: {
                                    type: "select",
                                    allowCustomText: true
                                },
                                selectPicker: {
                                    datasource: utype,
                                    displayField: "value",
                                    valueField: "key",
                                    selection: "single"
                                },
                                upload: {
                                    fileExtension: ['doc', 'docx', 'txt'],
                                    showPreview: true,
                                    url: "/Security/Upload",
                                    selection: 'multiple'
                                }
                            },
                            id: 'fg3'
                        }]
                })
            }

            $.Include({ plc: "onRegistraction" })

        })($)


    })

</script>